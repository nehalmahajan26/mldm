import pandas as pd
import numpy as np
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv('loans.csv')

data = data.drop(['client_id', 'loan_id'], axis=1)
data['loan_type'] = LabelEncoder().fit_transform(data['loan_type'])
data['loan_start'] = pd.to_datetime(data['loan_start'])
data['loan_end'] = pd.to_datetime(data['loan_end'])
data = data.drop(['loan_start', 'loan_end'], axis=1)

numeric_data = data.select_dtypes(include=[np.number])
categorical_data = data.select_dtypes(exclude=[np.number])
numeric_imputer = SimpleImputer(strategy='mean')
numeric_data = pd.DataFrame(numeric_imputer.fit_transform(numeric_data),
columns=numeric_data.columns)

scaler = StandardScaler()
numeric_data_scaled = pd.DataFrame(scaler.fit_transform(numeric_data),
columns=numeric_data.columns)

pca = PCA(n_components=2)
data_reduced = pca.fit_transform(numeric_data_scaled)
optimal_k = 3

kmeans = KMeans(n_clusters=optimal_k, random_state=0)
clusters = kmeans.fit_predict(data_reduced)
data['Cluster'] = clusters
plt.figure(figsize=(8, 6))
sns.scatterplot(x=data_reduced[:, 0], y=data_reduced[:, 1], hue=clusters, palette='viridis', s=50)
plt.title(f'K-means Clustering with {optimal_k} Clusters')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.legend(title='Cluster')
plt.show()
print(data.head())
